# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Webapp
GET         /                                                                             @controllers.ApplicationController.index
GET         /pipelines                                                                    @controllers.ApplicationController.index

# Visualisation containers
GET         /visualize/datacube                                                           @controllers.DataCubeController.visualize
GET         /visualize/map                                                                @controllers.MapController.visualize
GET         /visualize/openlayers                                                         @controllers.MapController.visualizeOL
GET         /visualize/:id                                                                @controllers.VisualizationController.visualize(id: Long)
GET         /visualize                                                                    @controllers.ApplicationController.index
GET         /visualize/embed/treemap/:id                                                  @controllers.VisualizationController.treemap(id: Long, schemeUri: String, language: String)
GET         /visualize/embed/sunburst/:id                                                 @controllers.VisualizationController.sunburst(id: Long, schemeUri: String, language: String)
GET         /visualize/embed/packLayout/:id                                               @controllers.VisualizationController.packLayout(id: Long, schemeUri: String, language: String)
GET         /visualize/embed/bilevel/:id                                                  @controllers.VisualizationController.bilevel(id: Long, schemeUri: String, language: String)
GET         /visualize/embed/partition/:id                                                @controllers.VisualizationController.partition(id: Long, schemeUri: String, language: String)
GET         /visualize/embed/force/:id                                                    @controllers.VisualizationController.force(id: Long, schemeUri: String, language: String)
GET         /visualize/embed/tree/:id                                                     @controllers.VisualizationController.tree(id: Long, schemeUri: String, language: String)
GET         /visualize/embed/cluster/:id                                                  @controllers.VisualizationController.cluster(id: Long, schemeUri: String, language: String)
GET         /visualize/embed/radialTree/:id                                               @controllers.VisualizationController.radialTree(id: Long, schemeUri: String, language: String)

GET         /components                                                                   @controllers.ComponentTemplateController.index

# Angular support
GET         /assets/javascripts/angular/:ngAppName/main.js                                @controllers.util.AngularController.requireMain(ngAppName: String)
GET         /assets/javascripts/angular/:ngAppName/controllers/layoutController.js        @controllers.util.AngularController.layoutController(ngAppName: String)
GET         /assets/javascripts/angular/:ngAppName/controllers.js                         @controllers.util.AngularController.controllersModule(ngAppName: String)

GET         /multisource                                                                  @controllers.VisualizationController.multiSource()
POST        /datasources                                                                  @controllers.VisualizationController.multiUpload()
GET         /discover/                                                                    @controllers.VisualizationController.discover(dataSourceTemplateIds : List[Long], combine: Boolean ?= false, lucky: Boolean ?= false)


# API v1
# Data upload
POST        /api/v1/ttl/upload                                                            @controllers.api.DataSourceApiController.fromFile
POST        /api/v1/dataSources/createSparqlEndpoints                                     @controllers.api.ComponentTemplateApiController.createSparqlEndpoints
POST        /api/v1/dataSources/createFromUrls                                            @controllers.api.ComponentTemplateApiController.createFromUrls
POST        /api/v1/dataSources/createByFileUpload                                        @controllers.api.ComponentTemplateApiController.createByFileUpload

# LDVM components
POST        /api/v1/components/add/ttl                                                    @controllers.api.LdvmApiController.ttl
GET         /api/v1/components/delete/:id                                                 @controllers.api.ComponentTemplateApiController.delete(id: Long)
GET         /api/v1/component/list                                                        @controllers.api.ComponentTemplateApiController.list(skip: Int ?= 0, pageSize: Int ?= 50)
GET         /api/v1/component/:id                                                         @controllers.api.ComponentTemplateApiController.findById(id: Long)
GET         /api/v1/component/:id/features                                                @controllers.api.ComponentTemplateApiController.featuresById(id: Long)
GET         /api/v1/component/:id/inputs                                                  @controllers.api.ComponentTemplateApiController.inputsById(id: Long)
GET         /api/v1/component/:id/output                                                  @controllers.api.ComponentTemplateApiController.outputById(id: Long)
GET         /api/v1/component/:id/descriptors                                             @controllers.api.ComponentTemplateApiController.descriptorsById(id: Long)
GET         /api/v1/component/makePermanent/:id                                           @controllers.api.ComponentTemplateApiController.makePermanent(id: Long)

# LDVM pipelines
GET         /api/v1/pipelines/evaluate/:pipelineId                                        @controllers.api.PipelineApiController.evaluate(pipelineId: Long)
GET         /api/v1/pipelines                                                             @controllers.api.PipelineApiController.list(skip: Int ?= 0, take: Int ?= 50, discoveryId: Option[Long] ?= None, visualizerId: Option[Long] ?= None, onlyPermanent: Option[Boolean] ?= None)
GET         /api/v1/pipelines/discover                                                    @controllers.api.PipelineApiController.discover(dataSourceTemplateIds: List[Long], combine: Boolean ?= false)
GET         /api/v1/pipelines/evaluations/:id                                             @controllers.api.PipelineApiController.evaluations(id: Long, skip: Int ?= 0, pageSize: Int ?= 10)
GET         /api/v1/pipelines/visualization/:id                                           @controllers.api.PipelineApiController.visualizationById(id: Long)
GET         /api/v1/pipelines/makePermanent/:id                                           @controllers.api.PipelineApiController.makePermanent(id: Long)
GET         /api/v1/pipelines/getSingle/:discoveryId                                      @controllers.api.PipelineApiController.getSingle(discoveryId: Long)
GET         /api/v1/pipelines/:id                                                         @controllers.api.PipelineApiController.findById(id: Long)

# LDVM compatibility
GET         /api/v1/compatibility/check/:pipelineId                                       @controllers.api.CompatibilityApiController.check(pipelineId: Long)

# Visualization
GET         /api/v1/evaluation/:id                                                        @controllers.api.VisualizationApiController.findById(id: Long)
GET         /api/v1/evaluation/result/:id                                                 @controllers.api.VisualizationApiController.dataReferences(id: Long)
GET         /api/v1/visualization/queries/:id                                             @controllers.api.VisualizationApiController.queries(id: Long, permalinkToken: String)
GET         /api/v1/visualization/cached/:id/:token                                       @controllers.api.VisualizationApiController.getCachedResult(id: Long, token: String)

# Visualizers support
# GEO
POST        /api/v1/map/polygon-entities/:id                                              @controllers.api.MapApiController.polygonEntities(id: Long)
GET         /api/v1/map/polygon-entities-properties/:id                                   @controllers.api.MapApiController.polygonEntitiesProperties(id: Long)
GET         /api/v1/map/properties/:id                                                    @controllers.api.MapApiController.properties(id: Long)
POST        /api/v1/map/markers/:id                                                       @controllers.api.MapApiController.markers(id: Long)

# SKOS
POST        /api/v1/skos/concepts/:id                                                     @controllers.api.SkosApiController.concepts(id: Long)
POST        /api/v1/skos/concepts/counts/:id                                              @controllers.api.SkosApiController.conceptsCounts(id: Long)
GET         /api/v1/skos/schemes/:id                                                      @controllers.api.SkosApiController.schemes(id: Long, tolerant: Boolean)
GET         /api/v1/skos/scheme/:id                                                       @controllers.api.SkosApiController.scheme(id: Long, schemeUri: String)
GET         /api/v1/skos/concepts/:id                                                     @controllers.api.SkosApiController.conceptsTolerant(id: Long)
GET         /api/v1/skos/create/:dataSourceTemplateId                                     @controllers.api.SkosApiController.createVisualisation(dataSourceTemplateId: Long)

# DataCube
GET         /api/v1/datacube/custom/:id/:permalinkToken                                   @controllers.api.DataCubeApiController.customCube(id: Long, permalinkToken: String, dimensionUri: String, valueUri: String)
GET         /api/v1/datacube/create/:dataSourceTemplateId                                 @controllers.api.DataCubeApiController.createVisualisation(dataSourceTemplateId: Long)
GET         /api/v1/datacube/datasets/:id                                                 @controllers.api.DataCubeApiController.datasets(id: Long)
GET         /api/v1/datacube/datastructure                                                @controllers.api.DataCubeApiController.dataStructure(id: Long, uri: String, isTolerant: Boolean ?= false)
GET         /api/v1/datacube/datastructure-components                                     @controllers.api.DataCubeApiController.dataStructureComponents(id: Long, uri: String, isTolerant: Boolean ?= false)
GET         /api/v1/datacube/datastructures/:id                                           @controllers.api.DataCubeApiController.dataStructures(id: Long)
POST        /api/v1/datacube/values/:id                                                   @controllers.api.DataCubeApiController.values(id: Long)
POST        /api/v1/datacube/slices/:id                                                   @controllers.api.DataCubeApiController.sliceCube(id: Long)

GET         /dereference/labels                                                           @controllers.api.VisualizationApiController.dereferenceLabels(uri: String)
GET         /dereference/comments                                                         @controllers.api.VisualizationApiController.dereferenceComments(uri: String)

# === ASSISTANT ===
POST        /assistant/api/auth/signUp                                                    @controllers.assistant.api.AuthApiController.signUp
POST        /assistant/api/auth/signIn                                                    @controllers.assistant.api.AuthApiController.signIn
POST        /assistant/api/auth/googleSignIn                                              @controllers.assistant.api.AuthApiController.googleSignIn
POST        /assistant/api/auth/signOut                                                   @controllers.assistant.api.AuthApiController.signOut
POST        /assistant/api/auth/getUser                                                   @controllers.assistant.api.AuthApiController.getUser

POST        /assistant/api/install                                                        @controllers.assistant.api.InstallApiController.install

POST        /assistant/api/createApp/addDataSource                                        @controllers.assistant.api.CreateAppApiController.addDataSource
POST        /assistant/api/createApp/getDataSources                                       @controllers.assistant.api.CreateAppApiController.getDataSources
POST        /assistant/api/createApp/runDiscovery                                         @controllers.assistant.api.CreateAppApiController.runDiscovery
POST        /assistant/api/createApp/getDiscovery/:id                                     @controllers.assistant.api.CreateAppApiController.getDiscovery(id: Long)
POST        /assistant/api/createApp/runEvaluation/:id                                    @controllers.assistant.api.CreateAppApiController.runEvaluation(id: Long)
POST        /assistant/api/createApp/getEvaluations/:id                                   @controllers.assistant.api.CreateAppApiController.getEvaluations(id: Long)
POST        /assistant/api/createApp/createApp                                            @controllers.assistant.api.CreateAppApiController.createApp

POST        /assistant/api/app/getApp/:id                                                 @controllers.assistant.api.AppApiController.getApp(id: Long)
POST        /assistant/api/app/getAppConfiguration/:id                                    @controllers.assistant.api.AppApiController.getAppConfiguration(id: Long)
POST        /assistant/api/catalog/getPublishedApps                                       @controllers.assistant.api.CatalogApiController.getPublishedApps

POST        /assistant/api/manageApp/updateAppSettings/:id                                @controllers.assistant.api.ManageAppApiController.updateAppSettings(id: Long)
POST        /assistant/api/manageApp/saveAppConfiguration/:id                             @controllers.assistant.api.ManageAppApiController.saveAppConfiguration(id: Long)
POST        /assistant/api/manageApp/publishApp/:id                                       @controllers.assistant.api.ManageAppApiController.publishApp(id: Long)
POST        /assistant/api/manageApp/deleteApp/:id                                        @controllers.assistant.api.ManageAppApiController.deleteApp(id: Long)

POST        /assistant/api/dashboard/getApplications                                      @controllers.assistant.api.DashboardApiController.getApplications
POST        /assistant/api/dashboard/getDiscoveries                                       @controllers.assistant.api.DashboardApiController.getDiscoveries
POST        /assistant/api/dashboard/getDiscovery/:id                                     @controllers.assistant.api.DashboardApiController.getDiscovery(id: Long)
POST        /assistant/api/dashboard/deleteDiscovery/:id                                  @controllers.assistant.api.DashboardApiController.deleteDiscovery(id: Long)
POST        /assistant/api/dashboard/deleteAllDiscoveries                                 @controllers.assistant.api.DashboardApiController.deleteAllDiscoveries
POST        /assistant/api/dashboard/getDataSources                                       @controllers.assistant.api.DashboardApiController.getDataSources
POST        /assistant/api/dashboard/deleteDataSource/:id                                 @controllers.assistant.api.DashboardApiController.deleteDataSource(id: Long)
POST        /assistant/api/dashboard/updateDataSource/:id                                 @controllers.assistant.api.DashboardApiController.updateDataSource(id: Long)
POST        /assistant/api/dashboard/getVisualizerComponents                              @controllers.assistant.api.DashboardApiController.getVisualizerComponents
POST        /assistant/api/dashboard/addVisualizer                                        @controllers.assistant.api.DashboardApiController.addVisualizer
POST        /assistant/api/dashboard/deleteVisualizer/:id                                 @controllers.assistant.api.DashboardApiController.deleteVisualizer(id: Long)
POST        /assistant/api/dashboard/updateVisualizer/:id                                 @controllers.assistant.api.DashboardApiController.updateVisualizer(id: Long)

POST        /assistant/api/common/getVisualizers                                          @controllers.assistant.api.CommonApiController.getVisualizers
POST        /assistant/api/common/getVirtuosoStatus                                       @controllers.assistant.api.CommonApiController.getVirtuosoStatus

POST        /assistant/api/commonVisualizer/getLabels/:id                                 @controllers.assistant.api.visualizers.CommonVisualizerApiController.getLabels(id: Long)
POST        /assistant/api/commonVisualizer/getComments/:id                               @controllers.assistant.api.visualizers.CommonVisualizerApiController.getComments(id: Long)

#maps - v1
POST        /assistant/api/mapsVisualizer/getProperties/:id                               @controllers.assistant.api.visualizers.MapsVisualizerApiController.getProperties(id: Long)
POST        /assistant/api/mapsVisualizer/getSkosConcepts/:id                             @controllers.assistant.api.visualizers.MapsVisualizerApiController.getSkosConcepts(id: Long)
POST        /assistant/api/mapsVisualizer/getSkosConceptsCounts/:id                       @controllers.assistant.api.visualizers.MapsVisualizerApiController.getSkosConceptsCounts(id: Long)
POST        /assistant/api/mapsVisualizer/getMarkers/:id                                  @controllers.assistant.api.visualizers.MapsVisualizerApiController.getMarkers(id: Long)

#maps - v2 getters
POST        /assistant/api/mapsVisualizer/getCoordinates/:id                              @controllers.assistant.api.visualizers.MapsVisualizerApiController.getCoordinates(id: Long)
POST        /assistant/api/mapsVisualizer/getPlaces/:id                                   @controllers.assistant.api.visualizers.MapsVisualizerApiController.getPlaces(id: Long)
POST        /assistant/api/mapsVisualizer/getQuantifiedThings/:id                         @controllers.assistant.api.visualizers.MapsVisualizerApiController.getQuantifiedThings(id: Long)
POST        /assistant/api/mapsVisualizer/getQuantifiedPlaces/:id                         @controllers.assistant.api.visualizers.MapsVisualizerApiController.getQuantifiedPlaces(id: Long)

#maps - v2 counts
POST        /assistant/api/mapsVisualizer/getCoordinates/count/:id                        @controllers.assistant.api.visualizers.MapsVisualizerApiController.getCoordinatesCount(id: Long)
POST        /assistant/api/mapsVisualizer/getPlaces/count/:id                             @controllers.assistant.api.visualizers.MapsVisualizerApiController.getPlacesCount(id: Long)
POST        /assistant/api/mapsVisualizer/getQuantifiedThings/count/:id                   @controllers.assistant.api.visualizers.MapsVisualizerApiController.getQuantifiedThingsCount(id: Long)
POST        /assistant/api/mapsVisualizer/getQuantifiedPlaces/count/:id                   @controllers.assistant.api.visualizers.MapsVisualizerApiController.getQuantifiedPlacesCount(id: Long)

#chord
POST        /assistant/api/chordVisualizer/getGraph/:id                                   @controllers.assistant.api.visualizers.ChordVisualizerApiController.getGraph(id: Long)
POST        /assistant/api/chordVisualizer/getSampleNodes/:id                             @controllers.assistant.api.visualizers.ChordVisualizerApiController.getSampleNodes(id: Long)
POST        /assistant/api/chordVisualizer/getNodes/:id                                   @controllers.assistant.api.visualizers.ChordVisualizerApiController.getNodes(id: Long)
POST        /assistant/api/chordVisualizer/getEdges/:id                                   @controllers.assistant.api.visualizers.ChordVisualizerApiController.getEdges(id: Long)
POST        /assistant/api/chordVisualizer/getMatrix/:id                                  @controllers.assistant.api.visualizers.ChordVisualizerApiController.getMatrix(id: Long)
POST        /assistant/api/chordVisualizer/getSearchableLens/:id                          @controllers.assistant.api.visualizers.ChordVisualizerApiController.getSearchableLens(id: Long)
POST        /assistant/api/chordVisualizer/searchNodes/:id                                @controllers.assistant.api.visualizers.ChordVisualizerApiController.searchNodes(id: Long)
POST        /assistant/api/chordVisualizer/getRelatedNodes/:id                            @controllers.assistant.api.visualizers.ChordVisualizerApiController.getRelatedNodes(id: Long)

#timeline - getters
POST        /assistant/api/timeLineVisualizer/getIntervals/:id                            @controllers.assistant.api.visualizers.TimeLineVisualizerApiController.getIntervals(id: Long)
POST        /assistant/api/timeLineVisualizer/getInstants/:id                             @controllers.assistant.api.visualizers.TimeLineVisualizerApiController.getInstants(id: Long)
POST        /assistant/api/timeLineVisualizer/getThingsWIntervals/:id                     @controllers.assistant.api.visualizers.TimeLineVisualizerApiController.getThingsWithIntervals(id: Long)
POST        /assistant/api/timeLineVisualizer/getThingsWInstants/:id                      @controllers.assistant.api.visualizers.TimeLineVisualizerApiController.getThingsWithInstants(id: Long)
POST        /assistant/api/timeLineVisualizer/getThingsWThingsWIntervals/:id              @controllers.assistant.api.visualizers.TimeLineVisualizerApiController.getThingsWithThingsWithIntervals(id: Long)
POST        /assistant/api/timeLineVisualizer/getThingsWThingsWInstants/:id               @controllers.assistant.api.visualizers.TimeLineVisualizerApiController.getThingsWithThingsWithInstants(id: Long)

#timeline - counts
POST        /assistant/api/timeLineVisualizer/getIntervals/count/:id                      @controllers.assistant.api.visualizers.TimeLineVisualizerApiController.getIntervalsCount(id: Long)
POST        /assistant/api/timeLineVisualizer/getInstants/count/:id                       @controllers.assistant.api.visualizers.TimeLineVisualizerApiController.getInstantsCount(id: Long)
POST        /assistant/api/timeLineVisualizer/getThingsWIntervals/count/:id               @controllers.assistant.api.visualizers.TimeLineVisualizerApiController.getThingsWithIntervalsCount(id: Long)
POST        /assistant/api/timeLineVisualizer/getThingsWInstants/count/:id                @controllers.assistant.api.visualizers.TimeLineVisualizerApiController.getThingsWithInstantsCount(id: Long)
POST        /assistant/api/timeLineVisualizer/getThingsWThingsWIntervals/count/:id        @controllers.assistant.api.visualizers.TimeLineVisualizerApiController.getThingsWithThingsWithIntervalsCount(id: Long)
POST        /assistant/api/timeLineVisualizer/getThingsWThingsWInstants/count/:id         @controllers.assistant.api.visualizers.TimeLineVisualizerApiController.getThingsWithThingsWithInstantsCount(id: Long)

GET         /assistant$any<.*>                                                            @controllers.assistant.PlatformController.index(any)
GET         /app/:id/:uid                                                                 @controllers.assistant.ApplicationController.index(id: Long, uid: String, any = null)
GET         /app/:id/:uid/$any<.*>                                                        @controllers.assistant.ApplicationController.index(id: Long, uid: String, any)

# Map static resources from the /public folder to the /assets URL path
GET         /vassets/*file                                                                controllers.Assets.versioned(path="/public", file: Asset)
GET         /assets/*file                                                                 controllers.Assets.at(path="/public", file)
GET         /webjars/*file                                                                controllers.WebJarAssets.at(file)
